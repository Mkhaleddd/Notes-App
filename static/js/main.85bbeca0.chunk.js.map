{"version":3,"sources":["components/Sidebar.js","components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","react_default","a","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","_ref","updateNote","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","JSON","parse","localStorage","getItem","setNotes","_React$useState3","_React$useState4","currentNoteId","createNewNote","nanoid","prevNotes","toConsumableArray","findCurrentNote","find","useEffect","setItem","stringify","length","react_split_es","sizes","direction","noteId","stopPropagation","oldNotes","filter","text","oldNote","objectSpread","newArr","i","unshift","push","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.85bbeca0.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Sidebar(props) {\n  \n    const noteElements = props.notes.map((note) => (\n       \n        <div key={note.id}>\n            <div\n                \n                className={`title ${\n                    note.id === props.currentNote.id ? \"selected-note\" : \"\"\n                }`}\n                onClick={() => props.setCurrentNoteId(note.id)}\n            >\n                <h4 className=\"text-snippet\">{note.body.split(\"\\n\",1)[0]}</h4>\n                <button \n                    className=\"delete-btn\"\n                    // Your onClick event handler here\n                    onClick={(event)=>props.deleteNote(event,note.id)}\n                >\n                    <i className=\"gg-trash trash-icon\"></i>\n                </button>\n            </div>\n        </div>\n    ))\n\n    return (\n        <section className=\"pane sidebar\">\n            <div className=\"sidebar--header\">\n                <h3>Notes</h3>\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\n            </div>\n            {noteElements}\n        </section>\n    )\n}\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\"\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nexport default function Editor({ currentNote, updateNote }) {\n    const [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n    const converter = new Showdown.Converter({\n        tables: true,\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tasklists: true,\n    })  \n\n    return (\n        <section className=\"pane editor\">\n            <ReactMde\n                value={currentNote.body}\n                onChange={updateNote}\n                selectedTab={selectedTab}\n                onTabChange={setSelectedTab}\n                generateMarkdownPreview={(markdown) =>\n                    Promise.resolve(converter.makeHtml(markdown))\n                }\n                minEditorHeight={80}\n                heightUnits=\"vh\"\n            />\n        </section>\n    )\n}\n","import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\nimport \"./App.css\"\n\n\nexport default function App() {\n \n    const [notes, setNotes] = React.useState(()=>JSON.parse( localStorage.getItem(\"note\")) \n    || []) \n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    )\n       React.useEffect(\n    ()=>{\n      \n      localStorage.setItem(\"note\",JSON.stringify(notes))\n    }\n   ,[notes])\n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\"\n        }\n        setNotes(prevNotes => [newNote, ...prevNotes])\n        setCurrentNoteId(newNote.id)\n    }\n\n     function updateNote(text) {\n        setNotes(oldNotes => oldNotes.map(oldNote => {\n            return oldNote.id === currentNoteId\n                ? { ...oldNote, body: text }\n                : oldNote\n        }))\n    \n    \n    setNotes(oldNotes=>{\n        let newArr=[]\n        for (let i = 0; i < oldNotes.length; i++) {\n           if ( oldNotes[i].id === currentNoteId) {\n            newArr.unshift(oldNotes[i])\n        } else{\n            newArr.push(oldNotes[i])\n        }     \n        }\n        return newArr;\n     })\n}\n\n    function deleteNote(event, noteId) {\n        event.stopPropagation();\n            setNotes( oldNotes=>oldNotes\n                .filter(note=>note.id !== currentNoteId)  \n          \n            )\n          \n        }\n   \n    \n    function findCurrentNote() {\n        return notes.find(note => {\n            return note.id === currentNoteId\n        }) || notes[0]\n    }\n    \n    return (\n        <main>\n        {\n            notes.length > 0 \n            ?\n            <Split \n                sizes={[30, 70]} \n                direction=\"horizontal\" \n                className=\"split\"\n            >\n                <Sidebar\n                    notes={notes}\n                    currentNote={findCurrentNote()}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNote={deleteNote}\n                />\n                {\n                    currentNoteId && \n                    notes.length > 0 &&\n                    <Editor \n                        currentNote={findCurrentNote()} \n                        updateNote={updateNote} \n                    />\n                }\n            </Split>\n            :\n            <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button \n                    className=\"first-note\" \n                    onClick={createNewNote}\n                >\n                    Create one now\n                </button>\n            </div>\n            \n        }\n        </main>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}